<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux crontab 命令</title>
      <link href="/posts/6446/"/>
      <url>/posts/6446/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><p>Linux crontab是用来定期执行程序的命令。</p></li><li><p>当安装完成操作系统之后，默认便会启动此任务调度命令。</p></li><li><p>crond 命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p></li></ul><hr><div class="note primary no-icon">            <p><strong>注意：</strong>新创建的 cron 任务，不会马上执行，至少要过 2 分钟后才可以，当然你可以重启 cron 来马上执行！</p>          </div><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab [ -u user ] file  或者 crontab [ -u user ] &#123; -l | -r | -e &#125;</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ul><li><p><code>crontab</code> 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</p></li><li><p><code>-u user</code> 是指设定指定 <code>user</code> 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 <code>-u user</code> 的话，就是表示设定自己的时程表。</p></li></ul><p><strong>参数说明</strong>：</p><ul><li>-e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)</li><li>-r : 删除目前的时程表</li><li>-l : 列出目前的时程表</li></ul><p><strong>时间格式如下</strong>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">f1 f2 f3 f4 f5 program</span><br></pre></td></tr></table></figure><ul><li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</li><li>当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</li><li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</li><li>当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推</li><li>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其馀类推</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 7) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure><p>使用者也可以将所有的设定先存放在文件中，用 crontab file 的方式来设定执行时间。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>每一分钟执行一次 /bin/ls：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* * * * * /bin/ls</span><br></pre></td></tr></table></figure><p>在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 6-12/3 * 12 * /usr/bin/backup</span><br></pre></td></tr></table></figure><p>周一到周五每天下午 5:00 寄一封信给 <a href="mailto:&#97;&#108;&#x65;&#x78;&#x40;&#x64;&#111;&#109;&#97;&#105;&#110;&#x2e;&#110;&#97;&#x6d;&#x65;">&#97;&#108;&#x65;&#x78;&#x40;&#x64;&#111;&#109;&#97;&#105;&#110;&#x2e;&#110;&#97;&#x6d;&#x65;</a>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 17 * * 1-5 mail -s <span class="string">&quot;hi&quot;</span> alex@domain.name &lt; /tmp/maildata</span><br></pre></td></tr></table></figure><p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">20 0-23/2 * * * <span class="built_in">echo</span> <span class="string">&quot;haha&quot;</span></span><br></pre></td></tr></table></figure><p>下面再看看几个具体的例子：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 */2 * * * /sbin/service httpd restart  意思是每两个小时重启一次apache </span><br><span class="line"></span><br><span class="line">50 7 * * * /sbin/service sshd start  意思是每天7：50开启ssh服务 </span><br><span class="line"></span><br><span class="line">50 22 * * * /sbin/service sshd stop  意思是每天22：50关闭ssh服务 </span><br><span class="line"></span><br><span class="line">0 0 1,15 * * fsck /home  每月1号和15号检查/home 磁盘 </span><br><span class="line"></span><br><span class="line">1 * * * * /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件 </span><br><span class="line"></span><br><span class="line">00 03 * * 1-5 find /home <span class="string">&quot;*.xxx&quot;</span> -mtime +4 -<span class="built_in">exec</span> rm &#123;&#125; \;  每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。</span><br><span class="line"></span><br><span class="line">30 6 */10 * * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>当程序在你所指定的时间执行后，系统会发一封邮件给当前的用户，显示该程序执行的内容，若是你不希望收到这样的邮件，请在每一行空一格之后加上 &gt; /dev/null 2&gt;&amp;1 即可，如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">20 03 * * * . /etc/profile;/bin/sh /var/www/runoob/test.sh &gt; /dev/null 2&gt;&amp;1 </span><br></pre></td></tr></table></figure><div class="note info">            <p>原文链接<a href="https://www.runoob.com/linux/linux-comm-crontab.html">linux crontab命令</a></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cronta </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决SSPANEL NAT机中转台湾家宽问题</title>
      <link href="/posts/3055/"/>
      <url>/posts/3055/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>问题：直接对接台湾家宽，速度不理想，想到了用nat机中转，但是面板ip地址那里是不变化的，台湾家宽两天变动一次，两天手动改ip太麻烦，就写了一个shell脚本清理缓存dns以后解析域名的ip，并实时传递到数据库，从而避免手动改ip 的麻烦！</p></blockquote><h4 id="1-脚本"><a href="#1-脚本" class="headerlink" title="1.脚本"></a>1.脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! bin/bash</span></span><br><span class="line">systemctl start nscd   <span class="comment">#需要安装  yum install -y nscd</span></span><br><span class="line">name=`host 域名 | cut -d <span class="string">&#x27; &#x27;</span> -f4`</span><br><span class="line">mysql -u用户名 -p密码  &lt;&lt;EOF</span><br><span class="line">update 数据库.表 <span class="built_in">set</span> node_ip = <span class="string">&quot;<span class="variable">$name</span>&quot;</span> <span class="built_in">where</span> id = 需要改动的节点id;</span><br><span class="line">quit</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><div class="note info">            <p>shell脚本在数据库所在的机器运行</p>          </div><h4 id="2-添加定时任务"><a href="#2-添加定时任务" class="headerlink" title="2.添加定时任务"></a>2.添加定时任务</h4><blockquote><p>我的脚本在主目录下，<code>crontab -e</code> 进入定时任务，在最后一行加入</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/1 * * * * sh /root/test.sh</span><br></pre></td></tr></table></figure><div class="note info">            <p>运行时间可根据自己的需求进行修改</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSPANEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用github备份自己的网站数据</title>
      <link href="/posts/27296/"/>
      <url>/posts/27296/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>注：原文出处在这里哦<a href="https://moe.best/gotagota/backup-to-github.html">原文链接</a></p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><p>github 账户</p></li><li><p>网站服务器</p></li></ul><h2 id="1、开始"><a href="#1、开始" class="headerlink" title="1、开始"></a>1、开始</h2><ul><li>然后接下来是在服务器上的操作：</li></ul><ul><li>进入一个你喜欢的安全的目录，此处直接以 <code>/root</code>为例</li></ul><ul><li>参考下命令创建一个 RSA 密匙</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后根据提示输入生成密匙的文件名，此处举例输入 <code>github</code>，要你输入 passphrase 的时候直接不输入回车就行<br>完成后会有类似这样的显示，并且你会在当前目录下得到 <code>github</code>和 <code>github.pub</code>这两个文件；<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/xiaoyanggo/CDN@master/Blog/%E5%88%A9%E7%94%A8github%E5%A4%87%E4%BB%BD%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE/%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE1.png"><br>接着用 <code>cat</code>命令查看 <code>github.pub</code>文件的内容，并复制下来</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat github.pub</span><br></pre></td></tr></table></figure><p>回到你的 Github 页面，点右上角头像，Settings，左边“SSH and GPG keys”，右上角“New SSH key”</p><p>然后将刚才复制的内容粘贴到“Key”输入框中，上方的“Tittle”自己随意输入，然后“Add SSH key”</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/xiaoyanggo/CDN@master/Blog/%E5%88%A9%E7%94%A8github%E5%A4%87%E4%BB%BD%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE/%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE2.png"></p><p>这样事前准备就完成了，嗯，其实就是加一个 SSH 密匙到 Github，这样可以方便后续 Github 项目的同步</p><h2 id="2、创建一个私密-Github-项目"><a href="#2、创建一个私密-Github-项目" class="headerlink" title="2、创建一个私密 Github 项目"></a>2、创建一个私密 Github 项目</h2><p>直接右上角新建项目</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/xiaoyanggo/CDN@master/Blog/%E5%88%A9%E7%94%A8github%E5%A4%87%E4%BB%BD%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD3_1.png"></p><h2 id="3、在你的站点目录下初始化你的-Github-项目"><a href="#3、在你的站点目录下初始化你的-Github-项目" class="headerlink" title="3、在你的站点目录下初始化你的 Github 项目"></a>3、在你的站点目录下初始化你的 Github 项目</h2><p>进入你的站点所在目录，并执行一系列 git 初始化命令，参考以下代码</p><p>假设我的网站在 <code>/www/wwwroot/xxx.com</code>，Github 项目为 <code>xiaoyanggo/test</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /www/wwwroot/xxx.com</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:xiaoyanggo/test.git</span><br></pre></td></tr></table></figure><h2 id="4、尝试同步当前站点到-Github-项目"><a href="#4、尝试同步当前站点到-Github-项目" class="headerlink" title="4、尝试同步当前站点到 Github 项目"></a>4、尝试同步当前站点到 Github 项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /www/wwwroot/xxx.com</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;backup&quot;</span><br><span class="line">ssh-agent bash</span><br><span class="line">ssh-add /root/github</span><br><span class="line">git push -u origin master -f #原文作者没有加-f导致同步失败，加上-f解决。</span><br></pre></td></tr></table></figure><h3 id="命令解释"><a href="#命令解释" class="headerlink" title="命令解释"></a>命令解释</h3><ol><li>进入网站目录</li><li>把目录下所有文件变化（增、删、改）提交到暂存区<br>如果你想只增、改而不删，那么可以用<code>git add .</code>命令代替</li><li>提交所有更改，这个<code>&quot;backup&quot;</code>可以随意填写，没有影响，其实就是你提交改动的时候的说明，但是 commit 的时候必须要有这个说明</li><li>启动 SSH 密钥管理器</li><li>将之前我们创建的<code>github</code>密匙文件添加到密匙管理器中</li><li>推送所有更改到 Github 项目<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/xiaoyanggo/CDN@master/Blog/%E5%88%A9%E7%94%A8github%E5%A4%87%E4%BB%BD%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE/%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE4.png"></li></ol><h2 id="5、设定每天自动同步"><a href="#5、设定每天自动同步" class="headerlink" title="5、设定每天自动同步"></a>5、设定每天自动同步</h2><p>使用 crontab 定时任务每天 <code>git push</code>一次</p><p>首先找个你喜欢的目录，创建一个脚本例如 <code>/root/backup_website.sh</code>，然后写入以下内容并保存</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">cd /www/wwwroot/xxx.com</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;backup&quot;</span><br><span class="line">ssh-add /root/github</span><br><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure><div class="note info">            <p>可以把数据库也放在脚本一起备份，数据库备份语句在最下面哦</p>          </div><p>接着编辑 crontab 的配置文件，<code>crontab -e</code>,然后保存退出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">30 3 * * * ssh-agent bash /root/backup_website.sh</span><br></pre></td></tr></table></figure><div class="note info">            <p>这样每天凌晨3:30的时候就会自动备份你的网站到 Github了</p>          </div><blockquote><p>题外话：由于本博主使用的是mysql数据库，所以是mysql数据库备份命令和思路！有需要备份数据库的把下面的脚本修改，放到上面的自动备份脚本就可以了。</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">DATE=`date +%Y-%m-%d`  #现在的时间</span><br><span class="line">DATE1=`date +%Y-%m-%d --date=&#x27;-7 day&#x27;` #设定一个需要删除的时间，我这里设置的的7天以前的删除</span><br><span class="line">mysqldump -u数据库用户名 -p密码 数据库名字 &gt; /www/wwwroot/sqlbackup/typecho.sql.$&#123;DATE&#125; #备份到网站目录下的sqlbackup文件夹</span><br><span class="line">rm -rf /www/wwwroot/sqlbackup/typecho.sql.$&#123;DATE1&#125; #删除7天之前的备份文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备份网站数据 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
